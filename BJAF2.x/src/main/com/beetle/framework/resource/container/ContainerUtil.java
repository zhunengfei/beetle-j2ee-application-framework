/* Generated by Together */

/*
 * BJAF - Beetle J2EE Application Framework
 * 甲壳虫J2EE企业应用开发框架
 * 版权所有2003-2015 余浩东 (www.beetlesoft.net)
 * 
 * 这是一个免费开源的软件，您必须在
 *<http://www.apache.org/licenses/LICENSE-2.0>
 *协议下合法使用、修改或重新发布。
 *
 * 感谢您使用、推广本框架，若有建议或问题，欢迎您和我联系。
 * 邮件： <yuhaodong@gmail.com/>.
 */
package com.beetle.framework.resource.container;

/**
 * <p>
 * Title: 框架设计
 * </p>
 * <p>
 * Description:系统Context应用
 * </p>
 * <p>
 * Copyright: Copyright (c) 2003
 * </p>
 * <p>
 * Company: 甲壳虫科技
 * </p>
 * 
 * @author 余浩东

 * @version 1.0
 */

import com.beetle.framework.AppProperties;
import com.beetle.framework.log.AppLogger;
import com.beetle.framework.resource.jaas.LoginCallbackHandlerFactory;
import com.beetle.framework.util.cache.ICache;
import com.beetle.framework.util.cache.StrongCache;
import com.beetle.framework.util.encrypt.AesEncrypt;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.security.auth.Subject;
import javax.security.auth.login.LoginContext;
import javax.security.auth.login.LoginException;
import java.security.PrivilegedAction;
import java.util.Properties;
import java.util.Set;

public final class ContainerUtil {
	private static ICache ejbctxCache = new StrongCache();
	private static ICache loginCtxCache = new StrongCache();
	private static AppLogger logger = AppLogger
			.getInstance(ContainerUtil.class);
	public static final String FRAMEWORK_JTA_JNDI_NAME = "FRAMEWORK_JTA_JNDI_NAME";

	private static final String LOCAL_EJB_CONTAINER_CTX = "LOCAL_EJB_CONTAINER_CTX";

	/**
	 * 根据sysconfig配置获取对于的LoginContext JAAS
	 * 
	 * @param tagName
	 * @return
	 * @throws LoginException
	 */
	public static LoginContext getLoginContext(String tagName)
			throws LoginException {
		LoginContext lct = (LoginContext) loginCtxCache.get(tagName);
		if (lct == null) {
			try {
				lct = createLoginContext(tagName);
			} catch (LoginException e) {// 待测试
				throw e;
			}
		}
		return lct;
	}

	private static final Object createCtxLock = new Object();

	private static LoginContext createLoginContext(String tagName)
			throws LoginException {
		LoginContext lct = (LoginContext) loginCtxCache.get(tagName);
		if (lct == null) {
			synchronized (createCtxLock) {
				String user = ContainerConfig.getContainValue(tagName,
						"SECURITY_PRINCIPAL");
				String pwd = ContainerConfig.getContainValue(tagName,
						"SECURITY_CREDENTIALS");
				// String mask =
				// ResourceReader.getResStr("resource_SYSCONFIG_MASK");
				int mask = AppProperties.getCONFIG_MASK();
				if (mask == 1) {
					pwd = AesEncrypt.decrypt(pwd);
				}
				String url = ContainerConfig.getContainValue(tagName,
						"PROVIDER_URL");
				String pdc = ContainerConfig.getContainValue(tagName,
						"CONTAINER_PRODUCT");
				lct = new LoginContext(pdc.toUpperCase(),
						LoginCallbackHandlerFactory.create(tagName, user, pwd,
								url));
				lct.login();
				loginCtxCache.put(tagName, lct);
			}
		}
		return lct;
	}

	/**
	 * 获取SysConfig.xml文件<default>标签定义的EJB容器上下文
	 * 
	 * 
	 * @return Context
	 * @throws NamingException
	 */
	public static Context getRemoteEJBContainerContext()
			throws javax.naming.NamingException {
		return getRemoteEJBContainerContext("default");
	}

	/**
	 * 获取SysConfig.xml文件<tagName>标签定义的EJB容器上下文 Contex会被缓存起来
	 * 
	 * @param tagName
	 * @return
	 * @throws javax.naming.NamingException
	 */
	public static Context getRemoteEJBContainerContext(String tagName)
			throws javax.naming.NamingException {
		Context ctx = (Context) ejbctxCache.get(tagName);
		if (ctx == null) {
			ctx = getContext(tagName);
			// ejbctxCache.put(tagName, ctx);
		}
		return ctx;
	}

	/**
	 * 获取本地EJB容器上下文Context
	 * 
	 * @return Context
	 * @throws NamingException
	 */
	public static Context getLocalEJBContainerContext()
			throws javax.naming.NamingException {
		if (!ejbctxCache.containsKey(LOCAL_EJB_CONTAINER_CTX)) {
			createContext();
		}
		return (Context) ejbctxCache.get(LOCAL_EJB_CONTAINER_CTX);
	}

	private static void createContext() throws javax.naming.NamingException {
		if (!ejbctxCache.containsKey(LOCAL_EJB_CONTAINER_CTX)) {
			synchronized (createCtxLock) {
				ejbctxCache.put(LOCAL_EJB_CONTAINER_CTX, new InitialContext());
			}
		}
		// return (Context) ejbctxCache.get(LOCAL_EJB_CONTAINER_CTX);
	}

	public static Object subjectDoAs(String tagname, Subject sbj,
			PrivilegedAction<?> paction) {
		return LoginCallbackHandlerFactory.subjectDoAs(tagname, sbj, paction);
	}

	/**
	 * 手动加载beetle_jaas.config文件，一般情况下在应用初始化时执行1次
	 */
	public static void loadBeetleJaasConfigFile() {
		System.setProperty("java.security.auth.login.config",
				AppProperties.getAppHome() + "beetle_jaas.config");
		if (logger.isDebugEnabled()) {
			logger.debug(System.getProperty("java.security.auth.login.config"));
		}
	}

	private static Context getContext(String tagname)
			throws javax.naming.NamingException {
		try {
			Context ctx = (Context) ejbctxCache.get(tagname);
			if (ctx == null) {
				synchronized (createCtxLock) {
					Properties properties = new Properties();
					properties.put(Context.INITIAL_CONTEXT_FACTORY,
							ContainerConfig.getContainValue(tagname,
									"INITIAL_CONTEXT_FACTORY"));
					properties.put(Context.PROVIDER_URL, ContainerConfig
							.getContainValue(tagname, "PROVIDER_URL"));
					properties.put(Context.URL_PKG_PREFIXES, ContainerConfig
							.getContainValue(tagname, "URL_PKG_PREFIXES"));
					String validate_type = ContainerConfig.getContainValue(
							tagname, "VALIDATE_TYPE");
					if (validate_type == null
							|| validate_type.equalsIgnoreCase("JNDI")) {
						String prin = ContainerConfig.getContainValue(tagname,
								"SECURITY_PRINCIPAL");
						properties.put(Context.SECURITY_PRINCIPAL, prin.trim());
						String cred = ContainerConfig.getContainValue(tagname,
								"SECURITY_CREDENTIALS");
						// String mask =
						// ResourceReader.getResStr("resource_SYSCONFIG_MASK");
						int mask = AppProperties.getCONFIG_MASK();
						if (mask == 1) {
							cred = AesEncrypt.decrypt(cred);
						}
						properties.put(Context.SECURITY_CREDENTIALS, cred);
					}
					if (logger.isDebugEnabled()) {
						logger.debug("--Context Properties begin---");
						logger.debug(properties);
						logger.debug("--Context Properties end---");
					}
					ctx = new InitialContext(properties);
					ejbctxCache.put(tagname, ctx);
				}
			}
			return ctx;
		} catch (NamingException e) {
			throw e;
		}
	}

	public static void clearLocalEJBContexts() {
		ejbctxCache.remove(LOCAL_EJB_CONTAINER_CTX);
	}

	public static void removeLoginContext(String tagname) {
		LoginContext lc = (LoginContext) loginCtxCache.get(tagname);
		if (lc != null) {
			try {
				lc.logout();
				lc = null;
			} catch (LoginException e) {
				logger.error(e.getMessage(), e);
			} finally {
				if (lc != null) {
					Subject sbj = lc.getSubject();
					if (sbj != null) {
						Set<?> s1 = sbj.getPrincipals();
						if (s1 != null) {
							s1.clear();
						}
						Set<?> s2 = sbj.getPrivateCredentials();
						if (s2 != null) {
							s2.clear();
						}
						Set<?> s3 = sbj.getPublicCredentials();
						if (s3 != null) {
							s3.clear();
						}
					}
				}
				lc = null;
			}
		}
		loginCtxCache.remove(tagname);
		if (logger.isDebugEnabled()) {
			logger.debug("removeLoginContext[" + tagname + "]ok!");
		}
	}

	/**
	 * 关闭远程context和从缓存清除
	 * 
	 * @param tagname
	 */
	public static void removeEJBContext(String tagname) {
		Context c = (Context) ejbctxCache.get(tagname);
		if (c != null) {
			try {
				c.close();
				c = null;
			} catch (NamingException e) {
				logger.error(e.getMessage(), e);
			}
		}
		ejbctxCache.remove(tagname);
	}

	public static void clearEJBContexts() {
		ejbctxCache.clear();
	}

	/**
	 * 获取框架本身公共信息配置 （resource.properties）
	 * 
	 * 
	 * @param key
	 *            APP_HOME--应用配置文件主目录 ;STORAGE_SYSTEM--Storage存储目录
	 * @return
	 */
	public static String getCommonConfig(String key) {
		return AppProperties.get(key);
	}

}
